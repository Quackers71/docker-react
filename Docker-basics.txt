## Docker Basics

# This is a duplicate from my Docker Repo

# Installing the latest Docker on Linux...

https://get.docker.com/
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
sudo usermod -aG docker ubuntu # to run docker commands as sudo

# next install docker machine
https://docs.docker.com/machine/install-machine/

$ base=https://github.com/docker/machine/releases/download/v0.14.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine

docker-machine version # to test docker machine has install correctly

# Alternatively for docker machine download via Github
https://github.com/docker/machine/releases

curl -L https://github.com/docker/machine/releases/download/v0.15.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
chmod +x /tmp/docker-machine &&
sudo cp /tmp/docker-machine /usr/local/bin/docker-machine


# last install docker compose
https://docs.docker.com/compose/install/#install-compose

sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Alternatively for docker compose download via Github
https://github.com/docker/compose/releases

sudo -i
curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

docker-compose version

## docker-and-kubernetes-the-complete-guide

## Section 1: Dive into Docker

# 8. Using the Docker Client

docker run hello-world # this acually failed so ran
docker login
docker run hello-world

## Section 2: Manipulating Containers with the Docker Client

# 12. Overriding Default Commands
docker run busybox echo hi there
# Output "hi there"

docker run busybox ls
bin
dev
etc
...
...
# These are folders that belong on the busybox image

# 13. Listing Running Containers

docker run busybox ping google.com
docker ps # In a 2nd Terminal - You will see the running Container
# Container ID | Image   | Command 			 | Created 		| Status	 | Ports | Names
# 14aded86a0cd | busybox | "ping.google.com" | 25 secs ago  | Up 23 secs | 		 | epic_coriander

docker ps 
# Lists Running Containers

docker ps --all
# Lists All Containers that are or have ever ran

docker run = docker create + docker start

ubuntu@ip-172-31-27-210:~$ docker create hello-world
451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6
ubuntu@ip-172-31-27-210:~$ docker start 451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6
451d918f0f923a7eb7aba3300f5e3bb3a629a67cf7918081683ea33019b2eea6

docker system prune
docker create busybox echo hi there
docker start -a 3cf2305fb276ee6a7c932f82a5fd7bee5537323c1de3853dd8de7840e79fac23
docker ps -a
docker create busybox ping google.com
docker start 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker logs 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker ps
docker logs 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker stop 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker start 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3
docker kill 119af6e7db41e13b85b2c59efaeb119229f3e87f4c7d5de3b89b5f11d78812b3


docker run --name redisinstance -d redis
ubuntu@ip-172-31-27-210:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
0701cb4f73c9        redis               "docker-entrypoint.sâ€¦"   7 minutes ago       Up 7 minutes        6379/tcp            redisinstance

docker exec -ti redisinstance sh
docker exec -ti redisinstance redis-cli

STDIN	|	STDOUT	|	STDERR

bash	|	powershell	|	zsh	|	sh

docker run -ti busybox sh # Ran from 1st Terminal
docker run -ti busybox sh # Ran from 2nd Terminal
docker ps # Ran from 3rd Terminal
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
da22b429a1db        busybox             "sh"                     About a minute ago   Up About a minute                       ecstatic_goldstine
e451b5a7f25e        busybox             "sh"                     About a minute ago   Up About a minute                       suspicious_heyrovsky

touch hithere # File create on 1st Terminal
ls # ran on 2nd Terminal has no association on 1st Terminal

## Section 3: Building Custom Images Through Docker Server

mkdir redis-server
cd redis-server


vim Dockerfile

[
# Use an existing docker image as a base
FROM alpine

# Download and install a dependency
RUN apk add --update redis

# Tell the image what to do when it starts as a container
CMD ["redis-server"]

# Save the File :wq
]


ubuntu@ip-172-31-27-210:~/redis-image$ docker build .    # This will build the image from the Dockerfile in this directory
Sending build context to Docker daemon  2.048kB
Step 1/3 : FROM alpine
latest: Pulling from library/alpine
4fe2ade4980c: Already exists
Digest: sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528
Status: Downloaded newer image for alpine:latest
 ---> 196d12cf6ab1
Step 2/3 : RUN apk add --update redis
 ---> Running in 63ef62240ac4
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
(1/1) Installing redis (4.0.11-r0)
Executing redis-4.0.11-r0.pre-install
Executing redis-4.0.11-r0.post-install
Executing busybox-1.28.4-r1.trigger
OK: 6 MiB in 14 packages
Removing intermediate container 63ef62240ac4
 ---> 47422ba49004
Step 3/3 : CMD ["redis-server"]
 ---> Running in 08f6dd424181
Removing intermediate container 08f6dd424181
 ---> c1fd1babf388
Successfully built c1fd1babf388


ubuntu@ip-172-31-27-210:~/redis-image$ docker run c1fd1babf388
1:C 25 Oct 20:07:24.017 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 25 Oct 20:07:24.017 # Redis version=4.0.11, bits=64, commit=bca38d14, modified=0, pid=1, just started
1:C 25 Oct 20:07:24.017 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
1:M 25 Oct 20:07:24.019 * Running mode=standalone, port=6379.
1:M 25 Oct 20:07:24.019 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
1:M 25 Oct 20:07:24.019 # Server initialized
1:M 25 Oct 20:07:24.019 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
1:M 25 Oct 20:07:24.019 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
1:M 25 Oct 20:07:24.019 * Ready to accept connections

# 32. Tagging an Image

ubuntu@ip-172-31-27-210:~/redis-image$ docker build -t redquacks/redis:latest .
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM alpine
 ---> 196d12cf6ab1
Step 2/4 : RUN apk add --update gcc
 ---> Using cache
 ---> 4f6e948ec8e0
Step 3/4 : RUN apk add --update redis
 ---> Using cache
 ---> 5afb124da534
Step 4/4 : CMD ["redis-server"]
 ---> Using cache
 ---> 75f85a70096c
Successfully built 75f85a70096c
Successfully tagged redquacks/redis:latest

redquacks	/			redis		:	latest
Docker ID	|	Repo/Project name	|	Version

# 33. Manual Image Generation with Docker Commit

ubuntu@ip-172-31-27-210:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
fafdb479ff5b        alpine              "sh"                38 seconds ago      Up 37 seconds                           condescending_montalcini
ubuntu@ip-172-31-27-210:~$ docker commit -c 'CMD ["redis-server"]' fafdb479ff5b
sha256:5b253f5bcdc6d8f640092a7e1025aa5fc984febc0619008922854cb5b37ffdd3
ubuntu@ip-172-31-27-210:~$

# This creates an Image from a running snapshot of the redis docker container 
# -c flag uses the CMD from the Dockerfile

## Section 4: Making Real Projects with Docker

# 34. Project Outline

# Dockerfile, index.js and package.json
# have been added in to the /simpleweb Folder
# this has also been added to the EC2 instance including access to this Repo

docker build . # Has been ran multiple times within the /simpleweb Folder
# Then
docker build -t quackers/simpleweb .
docker run -p 8080:8080 quackers/simpleweb

docker run -ti quackers/simpleweb sh
#or from a 2nd Command Prompt
docker exec -ti 1082e6a0a01b sh
# i.e.

/ # ubuntu@ip-172-31-27-210:~$ docker exec -ti 1082e6a0a01b sh
/usr/app # ls
Dockerfile         index.js           node_modules       package-lock.json  package.json
/usr/app #

## Section: 5 Docker Compose with Multiple Containers
# 51. Docker Compose Commands

# New Project files have been added into //Docker-K8sUdemy/visits

-rw-r--r-- 1 Rob 197609 120 Nov  2 22:39 docker-compose.yml
-rw-r--r-- 1 Rob 197609 113 Nov  2 22:24 Dockerfile
-rw-r--r-- 1 Rob 197609 478 Nov  2 22:45 index.js
-rw-r--r-- 1 Rob 197609 145 Nov  2 22:16 package.json

# Now run
docker-compose up
or 
ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/visits$ docker-compose up -d
WARNING: The Docker Engine you're using is running in swarm mode.

Compose does not use swarm mode to deploy services to multiple nodes in a swarm. All containers will be scheduled on the current node.

To deploy your application across the swarm, use `docker stack deploy`.

Starting visits_redis-server_1 ... done
Starting visits_node-app_1     ... done

ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/visits$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
76e0a58873a6        visits_node-app     "npm start"              8 minutes ago       Up 51 seconds       0.0.0.0:4001->8081/tcp   visits_node-app_1
281dec96bcf6        redis               "docker-entrypoint.sâ€¦"   8 minutes ago       Up 52 seconds       6379/tcp                 visits_redis-server_1

# Then to stop the services

ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/visits$ docker-compose down
Stopping visits_node-app_1     ... done
Stopping visits_redis-server_1 ... done
Removing visits_node-app_1     ... done
Removing visits_redis-server_1 ... done
Removing network visits_default

# 54. Automatic Container Restarts

# File changes can be seen in the commits
# Commands used were :
docker-compose up --build
docker-compose up
docker ps
#or
docker-compose ps # used only in the project directory



## Section: 6 Creating a Production Grade Workflow
# 57. Flow Specifics
# Using Github 
# Branches
# feature > pull request > master >> Travis CI >>> AWS Hosting
# Main Branch We will use: feature
# Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.

# 59. Project Generation
# Install nodejs in your environment
sudo apt install nodejs
sudo apt-get update
ubuntu@ip-172-31-27-210:~$ node -v
v8.10.0

sudo apt install npm
sudo apt-get update

ubuntu@ip-172-31-27-210:~$ sudo npm install -g create-react-app
/usr/local/bin/create-react-app -> /usr/local/lib/node_modules/create-react-app/index.js
/usr/local/lib
â””â”€â”¬ create-react-app@2.1.1
# See npm_install_create-react-app_output.txt for the full Output

# Creating the react.js app using "create-react-app" Command
ubuntu@ip-172-31-27-210:~$ sudo create-react-app frontend

Creating a new React app in /home/ubuntu/frontend.

Installing packages. This might take a couple of minutes.
Installing react, react-dom, and react-scripts...

finalize                  â–„ â•¢â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â•Ÿ
# See react_frontend_creation_output.txt for the full Output

# 61. Necessary Commands


sudo npm run test

 PASS  src/App.test.js
  âœ“ renders without crashing (31ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        2.595s
Ran all test suites.


npm run build
ubuntu@ip-172-31-27-210:~/frontend$ sudo npm run build

> frontend@0.1.0 build /home/ubuntu/frontend
> react-scripts build

Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  34.5 KB  build/static/js/1.1a2fe23b.chunk.js
  763 B    build/static/js/runtime~main.229c360f.js
  711 B    build/static/js/main.23b0d257.chunk.js
  511 B    build/static/css/main.057ed75e.chunk.css

The project was built assuming it is hosted at the server root.
You can control this with the homepage field in your package.json.
For example, add this to build it for GitHub Pages:

  "homepage" : "http://myname.github.io/myapp",

The build folder is ready to be deployed.
You may serve it with a static server:

  npm install -g serve
  serve -s build

Find out more about deployment here:

  http://bit.ly/CRA-deploy


sudo npm run start

Compiled successfully!

You can now view frontend in the browser.

  Local:            http://localhost:3000/
  On Your Network:  http://172.31.27.210:3000/

Note that the development build is not optimized.
To create a production build, use npm run build.

# 62. Creating the Dev Dockerfile
ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/frontend$ docker build -f Dockerfile.dev .
Sending build context to Docker daemon  49.15kB
Step 1/6 : FROM node:alpine
 ---> 5d526f8ba00b
Step 2/6 : WORKDIR '/app'
 ---> Using cache
 ---> 361499bfc40c
Step 3/6 : COPY package.json .
 ---> fa5b438c2da3
Step 4/6 : RUN npm install
 ---> Running in ad5902b73ec8
npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN ajv-keywords@3.2.0 requires a peer of ajv@^6.0.0 but none is installed. You must install peer dependencies yourself.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

added 1716 packages from 661 contributors and audited 35661 packages in 43.604s
found 0 vulnerabilities

Removing intermediate container ad5902b73ec8
 ---> bc2fa41a7110
Step 5/6 : COPY . .
 ---> 43adcc4c9642
Step 6/6 : CMD ["npm", "start"]
 ---> Running in b88d3a32d447
Removing intermediate container b88d3a32d447
 ---> 83c18d5c43bf
Successfully built 83c18d5c43bf

# 63. Duplicating dependencies
# if you find the /node_modules folder - remove it manually

# 64. Starting the Container
docker run -p 3000:3000 83c18d5c43bf

# 65. Docker Volumes
docker run -p 3000:3000 -v $(pwd):/app 83c18d5c43bf
# This errors

# 66. Bookmarking Volumes
docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app 83c18d5c43bf
# making changes in VSC will now populate into Docker Container on a git push <origin>

# 71. Executing Tests
ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/frontend$ docker build -f Dockerfile.dev .
Successfully built 16ecf4a3fcc6

docker run 16ecf4a3fcc6 npm run test
# add the -ti to make the CLI interactive i.e. STDIN
docker run -ti 16ecf4a3fcc6 npm run test

# 72. Live Updating Tests
# 
docker-compose up

docker ps # to acquire the running Docker ID
# then run the Test inside the Docker Container
docker exec -ti 80996240f002 npm run test

# When the 2nd Test is removed from App.test.js it will re-run the test and correct to 1 test

# 73. Docker Compose for Running Tests
# Added the Test(2nd Service) to the docker-compose file

  tests:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
        - /app/node_modules
      - .:/app
    command: ["npm", "run, "test"]

docker-compose up --build

ubuntu@ip-172-31-27-210:~/Docker-K8sUdemy/frontend$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
7dd90c10677c        frontend_web        "npm start"         42 seconds ago      Up 41 seconds       0.0.0.0:80->3000/tcp   frontend_web_1
d57765727845        frontend_tests      "npm run test"      42 seconds ago      Up 21 seconds                              frontend_tests_1

## Moving a copy this file into /frontend with new Repo initialized

# 80. Services Overview
# Github Setup - now running from the docker-react Repo
# Travis CI - logged in via GitHub account, authorised and using docker-react Repo











